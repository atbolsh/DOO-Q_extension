% Author: Felipe Leno da Silva
% This code reads .csv files generated by Burlap and print graphs. This code is only intended to generate graphs
% for the BRACIS 2016 conference, and is highly recommended that you implement your own function to generate graphs if you want to use it to any other purpose.


function generateGraphFromBurlapFile(folder,initTrial,endTrial)
%generateGraphFromBurlapFile This function opens files generated in Burlap
%and creates a graph comparing the algorithms
%   folder: Path for folder with files
%   initTrial: first trial to be opened (usually 1)
%   endTrial: last experiment Trial
    
    cd(folder);
    close('all');
    infoDir = dir('.');
    
    algorithmNames = cell(0,1);
    numAlg = 0;
    
    for i=1:size(infoDir,1)
       folderName = infoDir(i).name;
       
       %Only takes into account folders
       if(~strcmp(folderName,'.') && ~strcmp(folderName,'..') && infoDir(1).isdir )
           numAlg = numAlg+1;
           algorithmNames{numAlg} = folderName;           
           
       end       
    end
    
    %After counting all objects, process each Algorithm 
    episodes = cell(numAlg,1);
    metrics  = cell(numAlg,1);
    
    %used to metric Names
    metricNames = cell(0,0);
    
    for i=1:numAlg
       [episodes{i},metrics{i},metricNames] = getAlgMetrics(algorithmNames{i},initTrial,endTrial); 
    end
    
    %Prepare metrics in a cell variable, ready to be plotted
    %processedMetrics = processMetrics(metrics);
    
    %Plot all metrics

    for i=1:length(metricNames)
        %plotEpisode = episodes
        handlePlots = plotMetric(episodes,metrics,metricNames{i},i);
        legend_obj = legend(handlePlots, algorithmNames);
        graphConfiguration(i,legend_obj);
    end
    
    %Print Bar graph only for  Q table size
    handle = printBarGraph(metrics);
    set(gca,'xticklabel', algorithmNames) 
    
end

function [episodes,metrics,metricNames] = getAlgMetrics(algName,initialTrial,endTrial)
% Returns the content read in experiment files
    
    %access the folder
    cd(algName);
    
    episodes = zeros(1,1);
    
    trials = initialTrial:endTrial;
    metrics = cell(1,length(trials));
    
    indexTrial = 1;
    %Open each trial file
    for i = trials
       fileName = ['result',num2str(i),'.csv'];
       readF = importdata(fileName);
      
       metricNames = readF.colheaders(2:end);
       metrics{indexTrial} = readF.data(:,2:end);
       
       currentEpisodes = readF.data(:,1);      
       if(length(currentEpisodes)>length(episodes))
           episodes = currentEpisodes;
       end
       indexTrial = indexTrial+1;
    end
    currentEpisodes = episodes;
    episodes = zeros(1,length(currentEpisodes));
    episodes(:) = currentEpisodes(:);
    
    %Return to previous folder
    cd('..');

end

function handlePlots = plotMetric(episodes,metrics,metricName,numberMetric)
%DO last processing and plot

params = {'-or','-+g','-*b','-^k'};
transparency = 0.3;
%Create new plot canvas
figure;
hold all;

%title(metricName);

numberAlg = size(metrics,1);

handlePlots = zeros(1,numberAlg);
for i=1:numberAlg
    %processedMetric = normalizeMetric(metrics,i,numberMetric);
    [minProcessedMetric,maxProcessedMetric,meanMetric] = normalizeMetric(metrics,i,numberMetric);
    maxIndex = find(isnan(maxProcessedMetric),1);
    if(isempty(maxIndex))
        maxIndex = length(maxProcessedMetric);
    else
        maxIndex = maxIndex - 1;
    end
   [~,handlePlots(i)] = shadedplot(episodes{i}(1:maxIndex),maxProcessedMetric(1:maxIndex),minProcessedMetric(1:maxIndex),meanMetric(1:maxIndex),params{i},'k',transparency);
   set(handlePlots(i),'LineWidth',3);
   %plot(episodes{i},meanMetric);
end

end

function [minProcessedMetric,maxProcessedMetric,meanMetric] = normalizeMetric(metrics,algNumber,numberMetric)
%Return mean of all trials

allTrialsMetrics = metrics{algNumber};
minIndexMetric = 999;

%Remove data from steps that were not completed
for i=1:size(allTrialsMetrics,2)
    if(minIndexMetric > size(allTrialsMetrics{i},1))
        minIndexMetric = size(allTrialsMetrics{i},1);
    end
end
allTrialsOneMetric  = zeros(length(allTrialsMetrics),minIndexMetric);

for i=1:length(allTrialsMetrics)
    %Get values for 1 metric
    %numEpisodes = length(allTrialsMetrics{i}(:,numberMetric));
    %allTrialsOneMetric(i,1:numEpisodes) = allTrialsMetrics{i}(:,numberMetric);
    %allTrialsOneMetric(i,numEpisodes+1:end) = NaN;    
    allTrialsOneMetric(i,:) = allTrialsMetrics{i}(1:minIndexMetric,numberMetric);
end
%Calculate mean
%processedMetric = nanmean(allTrialsOneMetric,1);
[minProcessedMetric,maxProcessedMetric,meanMetric] = confidence95intervals(allTrialsOneMetric,1);
end

function graphConfiguration(numberMetric,legendObj)
%"Set esthetic configurations

set(gca,'fontsize',22);
set(get(gca, 'children'),'markers',10);
grid on

xlabel('episodes','FontName','Arial','FontWeight','bold');

%Q Table Entries
if(numberMetric==1)
    labelName='Q-table entries';
%Number of steps
elseif (numberMetric==2)
    labelName='steps';
%Cummulative Reward
elseif(numberMetric==3)
    labelName = 'Undiscounted Cumulative reward';
elseif(numberMetric==4)
    labelName = 'Cumulative reward';
    
end

set(legendObj,'FontSize',20);


ylabel(labelName,'FontWeight','bold','FontName','Arial','FontWeight','bold');
end


function handle = printBarGraph(metrics)

numberAlg = size(metrics,1);

dataGraph = zeros(numberAlg,2);
for i=1:numberAlg
    %processedMetric = normalizeMetric(metrics,i,numberMetric);
    [minProcessedMetric,maxProcessedMetric] = normalizeMetric(metrics,i,1);
    maxIndex = find(isnan(maxProcessedMetric),1);
    if(isempty(maxIndex))
        maxIndex = length(maxProcessedMetric);
    else
        maxIndex = maxIndex - 1;
    end
    dataGraph(i,:) = [minProcessedMetric(maxIndex),maxProcessedMetric(maxIndex)];
end
figure;
handle = bar(dataGraph,'stacked');

set(gca,'fontsize',22);
ylabel('Average Q-table size','FontWeight','bold','FontName','Arial','FontWeight','bold');
end
